// Copyright 2019 Aporeto Inc.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//     http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package bahamut

import (
	"fmt"
	"net/http"

	"go.acuvity.ai/elemental"
)

// CheckAuthentication checks if the current context has been authenticated if there is any authenticator registered.
//
// If it is not authenticated it stops the normal processing execution flow, and will write the Unauthorized response to the given writer.
// If not Authenticator is set, then it will always return true.
//
// This is mostly used by autogenerated code, and you should not need to use it manually.
func CheckAuthentication(authenticators []RequestAuthenticator, ctx Context) (err error) {

	if len(authenticators) == 0 {
		return nil
	}

	var action AuthAction
	for _, authenticator := range authenticators {

		action, err = authenticator.AuthenticateRequest(ctx)
		if err != nil {
			return err
		}

		switch action {
		case AuthActionOK:
			return nil
		case AuthActionKO:
			return elemental.NewError("Unauthorized", "You are not authorized to access this resource.", "bahamut", http.StatusUnauthorized)
		case AuthActionContinue:
			continue
		}
	}

	return nil
}

// CheckAuthorization checks if the current context has been authorized if there is any authorizer registered.
//
// If it is not authorized it stops the normal processing execution flow, and will write the Unauthorized response to the given writer.
// If not Authorizer is set, then it will always return true.
//
// This is mostly used by autogenerated code, and you should not need to use it manually.
func CheckAuthorization(authorizers []Authorizer, ctx Context) (err error) {

	if len(authorizers) == 0 {
		return nil
	}

	var action AuthAction
	for _, authorizer := range authorizers {

		action, err = authorizer.IsAuthorized(ctx)
		if err != nil {
			return err
		}

		switch action {
		case AuthActionOK:
			return nil
		case AuthActionKO:
			return elemental.NewError(
				"Forbidden",
				fmt.Sprintf(
					"You are not allowed to perform '%s' on '%s'",
					ctx.Request().Operation,
					ctx.Request().Identity.Category,
				),
				"bahamut",
				http.StatusForbidden,
			)
		case AuthActionContinue:
			continue
		}
	}

	return nil
}
